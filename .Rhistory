find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("kernSmooth")
install.packages("KernSmooth")
libarary(KernSmooth)
library(KernSmooth)
exit
quit
quit
con <- gzfile ("rprog-data-quiz1_data")
x <- readline (con)
x <- readLines (con)
hw1 = read.csv('hw1_data.csv')
rprog.data.quiz1_data <- read.table("C:/Users/Min/Downloads/rprog-data-quiz1_data.zip", header=TRUE, quote="\"")
View(rprog.data.quiz1_data)
hw1 = read.csv('hw1_data.csv')
View(rprog.data.quiz1_data)
con <- gzfile ("rprog-data-quiz1_data")
x <- readLines (con)
ud
get wd
dir ()
cd ()
gd ()
get wd ()
rprog.data.quiz1_data <- read.table("C:/Users/Min/Downloads/rprog-data-quiz1_data.zip", header=TRUE, quote="\"")
View(rprog.data.quiz1_data)
cd ("C:/Users/Min/Downloads/rprog-data-quiz1_data.zip")
download.file ("https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fquiz1_data.zip")
download.file ("https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fquiz1_data.zip","rprog.data.quiz1_data")
con <- gzfile ("rprog.ata.quiz1_data")
x <- readLines (con)
con <- gbzfile ("rprog.ata.quiz1_data")
con <- bzfile ("rprog.ata.quiz1_data")
x <- readLines (con)
list
names (rprog.ata.quiz1_data)
names (rprog.data.quiz1_data)
con <- gzfile ("rprog.data.quiz1_data")
x <- readLines (con)
con <- bzfile ("rprog.data.quiz1_data")
x <- readLines (con)
con
rprog.data.quiz1_data
rm
download.file ("https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fquiz1_data.zip","rprog-data-quiz1")
data <- read.table(unz("rprog-data-quiz1"))
temp <- tempfile()
data <- read.table(unz(temp,"rprog-data-quiz1"))
download.file ("https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fquiz1_data.zip","rprog-data-quiz1",temp)
download.file ("https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fquiz1_data.zip","rprog-data-quiz1", temp)
hw1 = read.csv('rprog-data-quiz1_data.csv')
ls
wd
getwd ()
temp <- tempfile ()
download.file ("https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fquiz1_data.zip", temp)
data <- read.table (unz(temp, "quiz.data"))
data <- read.table(unz(temp, "hw1_data"))
data <- read.table(unz(temp, "hw1_data.csv"))
read.table
hw1 = read.csv('hw1_data.csv')
hw1 <- read.csv('hw1_data.csv')
gzfile ("hw1_data.csv")
hw1 <- read.csv ("hw1_data.csv")
names ("hw1_data.csv")
readLines ("hw1_data.csv")
readLines ("hw1_data")
unlink temp
unlink(temp)
temp <- url("https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fquiz1_data.zip", "hw1")
readLines ("hw1_data.csv“）
hw1 <- read.csv("hw1_data")
hw1 <- read.csv("hw1_data.csv")
ls
dir()
hw1 <- read.table ("rprog-data-quiz1")
names (hw1)
download.file ("https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fquiz1_data.zip", "hw1")
dir()
gzfile ("hw1")
dir()
data <- read.table("hw1")
names ("hw1")
names (hw1)
names (rprog-data-quiz1)
names (data)
hw1 = read.csv('hw1_data.csv')
hw1 <- read.csv("hw1_data.csv")
dir()
cd ("C:\Users\Min\Documents\R programming")
C:\、Users\Min\Documents\R programming
getwd ()
cd ("C:/Users/Min/Documents/R programming")
library(swirl)
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste (my_char, collaps = "")
paste (my_char, collaps = " ")
paste (my_char, collapse = " ")
c (my_char, "Jiamin")
my_name <- c(my_char, "Jiamin")
my_name
paste (my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, "X", "Y", "Z", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c (44, NA, 5, NA)
x*3
y = rnorm (1000)
y <- rnorm (1000)
z<-rep(NA, 1000)
my_data <- sample (c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <-x[!is.na)]
y <-x[!is.na(x))]
y <-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
c(3,5,7)
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo =11, bar = 2, norf =NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "var")]
vect[c("foo", "bar")]
$ git clone https://github.com/JiaminZheng/ProgrammingAssignment2
git clone https://github.com/JiaminZheng/ProgrammingAssignment2
https://github.com/JiaminZheng/ProgrammingAssignment2
?solve
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
h8 <- hilbert(8); h8
sh8 <- solve(h8)
round(sh8 %*% h8, 3)
A <- hilbert(4)
A[] <- as.complex(A)
try(solve(A))
a
A
?try
?hilbert
source("cachematrix.R")
setwd("~/R/ProgrammingAssignment2")
source("cachematrix.R")
cacheSolve(A)
ma <-makeCacheMatrix(matrix(1:4,2,2))
ma <-matrix(1:4,2,2))
ma <-matrix(1:4,2,2)
mb <- makeCacheMatrix(ma)
mb
solve(ma)
ma
x<-ma
x
makeCacheMatrix(x)
makeCacheMatrix(x)
source("cachematrix.R")
m<-makeCacheMatrix(matrix(1:4,2,2))
cacheSOlve(m)
cacheSolve(m)
cacheSolve(m)
